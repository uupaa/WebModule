#!/usr/bin/env node

var _USAGE = _multiline(function() {/*
    Usage:

        1. Clone WebModule to your work space.

            ```sh
            $ git clone git@github.com:uupaa/WebModule.git
            $ cd WebModule
            $ npm install
            $ cd ..
            ```

        2. Create new repository 'MyModule.js' in the GitHub, and clone it.

            ```sh
            $ git clone git@github.com:uupaa/MyModule.js.git
            $ cd MyModule.js
            ```

        3. Execute clone command.

            ```sh
            $ node ../WebModule/clone GITHUB-USER-NAME [--alt] [--bin]
            ```

        ```
        workspace/
            |
            + WebModule/
            |
            + MyModule.js/
        ```
*/});

//  fileName                [scan, sourceFileName]

var _CLONE_FILES = {
    "alt": {
        "Zzz.ts":           [true],
    },
    "bin": {
        "Zzz.js":           [true],
    },
    "lib": {
        "Zzz.js":           [true],
    },
    "lint": {
        "plato": {
            "README.md":    [],
        }
    },
    "release": {
        "README.md":        [],
    },
    "test": {
//      "index.html":       [true],
//      "index.node.js":    [true],
        "test.js":          [true],
    },
    ".gitignore":           [],
    ".jshintrc":            [],
    ".npmignore":           [],
    ".travis.yml":          [],
    "index.js":             [true],
    "LICENSE":              [],
    "package.json":         [true],
    "README.md":            [true, "MODULE_README.md"]
};

var _CONSOLE_COLOR = {
        RED:    "\u001b[31m",
        YELLOW: "\u001b[33m",
        GREEN:  "\u001b[32m",
        CLEAR:  "\u001b[0m"
    };

var fs                 = require("fs");
var readline           = require("readline");
var Task               = require("uupaa.task.js");
var argv               = process.argv.slice(2);
var githubUserName     = argv[0] || "";

var repositoryFullName = process.cwd().split("/").pop();
var repositoryName     = repositoryFullName.indexOf(".") >= 0
                       ? repositoryFullName.split(".").slice(0, -1).join(".")
                       : repositoryFullName;

var fromDir            = process.argv[1].split("/").slice(0, -1).join("/") + "/";
var toDir              = process.cwd() + "/";

// console.log( "repositoryFullName: " + repositoryFullName  ); // "Foo.js"
// console.log( "repositoryName:     " + repositoryName      ); // "Foo"
// console.log( "fromDir:            " + fromDir             ); // "/Users/uupaa/oss/WebModule/"
// console.log( "toDir:              " + toDir               ); // "/Users/uupaa/oss/Foo.js"
// return;

var options = _parseCommandLineOptions({
        help:       false,      // Boolean: true is show help.
        verbose:    false,      // Boolean: true is verbose mode.
        alt:        false,      // boolean: true is put alt/ dir.
        bin:        false,      // boolean: true is put bin/ dir.
    });

if (options.verbose || !githubUserName) {
    console.log(_CONSOLE_COLOR.YELLOW + _USAGE + _CONSOLE_COLOR.CLEAR);
    return;
}

if (!options.alt) {
    delete _CLONE_FILES.alt;
}
if (!options.bin) {
    delete _CLONE_FILES.bin;
}

_clone(fromDir, toDir, _CLONE_FILES);

// =========================================================

function _clone(fromDir,    // @arg String: copy from dir. has tail slash(/)
                toDir,      // @arg String: copy to dir. has tail slash(/)
                fileTree) { // @arg Object: source file tree.

    var overwriteFiles = []; // [ [targetFile, sourceText], ... ]

    _doClone(overwriteFiles, fromDir, toDir, fileTree);

    if (overwriteFiles.length) {
        var rl = readline.createInterface(process.stdin, process.stdout);
        Task.loop(overwriteFiles, _tick, function() {
            rl.close();
        });

        function _tick(task, index, overwriteFiles) {
            var ary = overwriteFiles[index];
            var targetFile = ary[0];
            var sourceText = ary[1];

            rl.question("  exists:    " + targetFile + " - overwrite it? (y/n): ",
                       function(answer) {

                if (/^y$/i.test(answer)) {
                    console.log(_CONSOLE_COLOR.YELLOW + "  overwrite: " + targetFile + _CONSOLE_COLOR.CLEAR);
                    fs.writeFileSync(targetFile, sourceText);
                } else {
                    console.log("  skip:      " + targetFile);
                }
                task.pass();
            });
        }
    }
}

function _doClone(overwriteFiles, fromDir, toDir, fileTree) {
    for (fileName in fileTree) {
        _loop(overwriteFiles, fileName, fileTree);
    }

    function _loop(overwriteFiles, fileName, fileTree) {
        var options        = fileTree[fileName]; // [scan, sourceFileName]
        var scan           = options[0] || false;
        var sourceFileName = options[1] || "";

        if ( !Array.isArray(options) ) {
            if ( !fs.existsSync(toDir + fileName) ) {
                console.log("  mkdir:     " + toDir + fileName + "/");
                fs.mkdirSync(toDir + fileName);
            }
            // recursive call
            _doClone(overwriteFiles,
                     fromDir + fileName + "/",
                     toDir   + fileName + "/",
                     fileTree[fileName]);

        } else {
            var sourceFile = fromDir + (sourceFileName || fileName);
            var targetFile = toDir   + fileName;

            if ( /zzz/i.test(targetFile) ) { // replace fileName. "dir/Zzz.js" -> "dir/MyModule.js"
                targetFile = targetFile.replace(/Zzz/g, repositoryName).
                                        replace(/zzz/g, repositoryName.toLowerCase());
            }

            var targetFileAlreadyExists = fs.existsSync(targetFile);
            var sourceText = fs.readFileSync(sourceFile, "UTF-8");
            var targetText = targetFileAlreadyExists ? fs.readFileSync(targetFile, "UTF-8")
                                                     : "";

            if (scan) {
                sourceText = _repleaceText(sourceText);
            }
            if (targetText && targetText !== sourceText) {
                overwriteFiles.push([targetFile, sourceText]);
            } else {
                if (targetFileAlreadyExists) {
                    console.log("  overwrite: " + targetFile);
                } else {
                    console.log("  clone:     " + targetFile);
                }
                fs.writeFileSync(targetFile, sourceText);
            }
        }
    }

    function _repleaceText(text) {

        // Replace JSPerf URL.
        //      "http://jsperf.com/uupaa-zzz/" -> "http://jsperf.com/GITHUB-USERNAME-WebModule/"
        text = text.replace(/jsperf.com.uupaa.zzz/, function(_) {
            return "jsperf.com/" + githubUserName.toLowerCase() +
                             "-" + repositoryName.replace("_", "-").toLowerCase();
        });

        // Replace module name in package.json.
        //      { "name": "webmodule" } -> { "name": githubUserName + repositoryFullName }
        //      { "version": "*" } -> { "version": "0.0.0" }
        if (fileName === "package.json") {
            text = text.replace(/webmodule/, (githubUserName + "." + repositoryFullName).toLowerCase());
            text = text.replace(/\"version\"\:(\s*)\"[^"]*\"/, "\"version\":$1\"0.0.0\"");
        }

        // Replace zzz to repository name.
        text = text.replace(/Zzz/g, repositoryName).
                    replace(/zzz/g, repositoryName.toLowerCase());

        // Replace GitHub UserName.
        //      "__GITHUB_USER_NAME__" -> "githubUserName"
        if (githubUserName) {
            text = text.replace(/__GITHUB_USER_NAME__/g, githubUserName);
        }
        return text;
    }
}

function _parseCommandLineOptions(options) { // @arg Object:
                                             // @ret Object:
    for (var i = 0, iz = argv.length; i < iz; ++i) {
        switch (argv[i]) {
        case "-h":
        case "--help":      options.help = true; break;
        case "-v":
        case "--verbose":   options.verbose = true; break;
        case "--alt":       options.alt = true; break;
        case "--bin":       options.bin = true; break;
        default:
        }
    }
    return options;
}

function _multiline(fn) { // @arg Function:
                          // @ret String:
    return (fn + "").split("\n").slice(1, -1).join("\n");
}
